{"version":3,"sources":["Bingo.js","index.js"],"names":["Bingo","props","state","position","winner","console","log","Streamlit","setComponentValue","setFrameHeight","is_winner","p","this","r","score","c","bingo","setState","prevState","args","setTimeout","center_piece","undefined","options","incr","i","map","r_val","key","c_val","src","width","alt","type","className","id","onChange","e","target","checked","check_bingo","htmlFor","text","startsWith","error","Square","StreamlitComponentBase","withStreamlitConnection","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7a41410.chunk.js","sourcesContent":["import {\n    Streamlit,\n    StreamlitComponentBase,\n    withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React from \"react\"\n\n\nconst Square = (text) => {\n    try {\n        return (<>{(text.startsWith('http://') | text.startsWith('https://')) ? <img src={text} width=\"50%\" alt=\"Bingo Option\" /> : text}</>)\n    } catch (error) {\n        return (<>Free Space!</>)\n    }\n}\n\nclass Bingo extends StreamlitComponentBase {\n    constructor(props) {\n        super(props);\n        this.state = {\n            position: [\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0],\n                [0, 0, 1, 0, 0],\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0]\n            ],\n            winner: false\n        };\n    }\n\n    bingo() {\n        console.log(\"BINGO!\")\n\n        // This is not needed since it is set in check_bingo()\n        // this.setState(prevState => ({\n        //     winner: true\n        // }));\n\n        // Method to pass back to Streamlit\n        // This currently causes the Streamlit page to redraw\n        Streamlit.setComponentValue(true)\n    }\n\n    check_bingo() {\n        // Re-set the iframe height just because\n        Streamlit.setFrameHeight()\n\n        let is_winner = false\n        let p = this.state.position\n\n        // Check each row to see if there's a bingo\n        for (let r = 0; r < 5; r++) {\n            let score = 0\n            for (let c = 0; c < 5; c++) {\n                score += p[r][c]\n            }\n            if (score === 5) {\n                this.bingo()\n                is_winner = true\n            }\n        }\n\n        // Check each column to see if there's a bingo\n        for (let c = 0; c < 5; c++) {\n            let score = 0\n            for (let r = 0; r < 5; r++) {\n                score += p[r][c]\n            }\n            if (score === 5) {\n                this.bingo()\n                is_winner = true\n            }\n        }\n\n        // Check the diagonals to see if there's a bing\n        if ((p[0][0] + p[1][1] + p[2][2] + p[3][3] + p[4][4]) === 5) {\n            this.bingo()\n            is_winner = true\n        }\n        if ((p[4][0] + p[3][1] + p[2][2] + p[1][3] + p[0][4]) === 5) {\n            this.bingo()\n            is_winner = true\n        }\n\n        // Set the winning state\n        // Also used to unset the winning state\n        this.setState(prevState => ({\n            winner: is_winner\n        }));\n    }\n\n\n    componentDidMount() {\n        Streamlit.setComponentValue(this.props.args[\"value\"])\n        Streamlit.setFrameHeight()\n\n        // Re-set the iframe height after 500 ms in case it didn't get set correctly the first time\n        setTimeout(() => {\n            Streamlit.setFrameHeight()\n        }, 500);\n    }\n\n\n    render() {\n        // Get the center piece image\n        const center_piece = this.props.args[\"center_piece\"] === undefined ? 'https://www.snowflake.com/wp-content/themes/snowflake/img/favicons/apple-touch-icon.png' : this.props.args[\"center_piece\"]\n\n        // Get the bingo place options\n        const options = this.props.args[\"bingo_options\"] === undefined ? ['B', 'I', 'N', 'G', 'O'] : (this.props.args[\"bingo_options\"])\n\n        var incr = 0\n        var i = -1\n\n        return (<>\n            <table>\n                <thead>\n                    <tr>\n                        <td>B</td>\n                        <td>I</td>\n                        <td>N</td>\n                        <td>G</td>\n                        <td>O</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    {[0, 0, 0, 0, 0].map((r_val, r) => {\n                        return (\n                            <tr key={`r${r}`}>\n                                {[0, 0, 0, 0, 0].map((c_val, c) => {\n                                    i++\n\n                                    // If the index doesn't exist, reset\n                                    if (options[i] === undefined) {\n                                        i = -1\n                                    }\n                                    incr++\n                                    return (\n                                        <td key={`r${r}c${c}`}>\n                                            {(r === 2 & c === 2) ?\n                                                <img src={center_piece} width=\"90%\" alt=\"Free Space\" />\n                                                :\n                                                <>\n                                                    <input\n                                                        type=\"checkbox\"\n                                                        className=\"btnControl\"\n                                                        id={`btnControl${incr}`}\n                                                        onChange={(e) => {\n                                                            this.state.position[r][c] = e.target.checked ? 1 : 0\n                                                            this.setState(prevState => this.state.position)\n                                                            this.check_bingo()\n                                                        }}\n                                                    />\n                                                    <label className=\"btn\" htmlFor={`btnControl${incr}`}>\n                                                        <img src={center_piece} width=\"90%\" alt=\"Bingo Marker\" />\n                                                        <div>\n                                                            {Square(options[i])}\n                                                        </div>\n                                                    </label>\n                                                </>\n                                            }\n                                        </td>\n                                    )\n                                })}\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </table>\n        </>)\n    }\n}\n\nexport default withStreamlitConnection(Bingo)","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Bingo from \"./Bingo\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <Bingo />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)"],"sourceRoot":""}